// Top-level build file where you can add configuration options common to all sub-projects/modules.
buildscript {


    repositories {
        google()
        mavenCentral()
        maven {
            url = uri("https://repo.maven.apache.org/maven2/")
        }
        maven {
            url = uri("https://s01.oss.sonatype.org/content/repositories/snapshots/")
        }
        maven {
            url = uri("https://repository.sonatype.org/content/groups/public/")
        }
        maven {
            url = uri("https://mvnrepository.com/")
        }
        maven {
            url = uri("https://maven.scijava.org/content/repositories/public/")
        }
        maven {
            url = uri("https://plugins.gradle.org/m2/")
        }
        maven {
            url "https://maven.jzy3d.org/releases/"
        }
        maven {
            url "https://www.jetbrains.com/intellij-repository/releases"
        }
        flatDir dirs: "${rootDir}/lib"
    }

    dependencies {
        classpath 'com.android.tools.build:gradle:8.5.2'
        classpath 'com.google.firebase:firebase-crashlytics-gradle:3.0.2'
        classpath 'com.google.gms:google-services:4.4.2'
        //classpath 'com.huawei.agconnect:agconnect-core:1.5.2.300'
        //classpath 'com.huawei.agconnect:agcp:1.5.2.300'
    }
}



plugins {
    id("application") // enabling the plugin here
    id("java")
    id 'java-library'
    id 'maven-publish'
    id 'org.jreleaser' version '1.14.0'
    id 'signing'
}

def kotlin_version = '2.0.0'

/*

dependencies {
// https://mvnrepository.com/artifact/androidx.core/core-ktx
    runtimeOnly group: 'androidx.core', name: 'core-ktx', version: '1.15.0'

    runtimeOnly 'androidx.test:core:1.5.0'
    runtimeOnly 'androidx.test:monitor:1.6.1'
    testImplementation 'junit:junit:4.13.2'
    runtimeOnly "androidx.annotation:annotation-experimental-lint:1.0.0"
    runtimeOnly "androidx.arch.core:core-common:2.2.0"
    runtimeOnly "androidx.test:annotation:1.0.0"
    runtimeOnly "androidx.tracing:tracing:1.2.0"
    // To use the Java-compatible @androidx.annotation.OptIn API annotation
    runtimeOnly "androidx.annotation:annotation-experimental-lint:1.0.0"
    testImplementation 'junit:junit:4.13.2'
    implementation group: 'one.empty3.libs', name: 'commmons-mp', version: '0.0.2'

}

 */
Properties properties = new Properties()
try {
    // Other configuration here
    File propertiesFile = new File('../private.properties/gradle.properties')
    propertiesFile.withInputStream {
        properties.load(it)
    }
} catch (Exception ex) {
    ex.printStackTrace()
}


Properties propertiesReleaseConfig = new Properties()
try {
    // Other configuration here
    File propertiesFile = new File('C:\\Users\\manue\\.jreleaser\\config.properties')
    propertiesFile.withInputStream {
        propertiesReleaseConfig.load(it)
    }
} catch (Exception ex) {
    ex.printStackTrace()
}

tasks.register('copyTask', Copy) {
    // duplicateStrategy = DuplicatesStrategy.WARN
    from 'src/main/java/'
    into 'build/classes/java/main'
}
tasks.register('javadocJar', Jar) {
    dependsOn javadoc
    archiveClassifier = "javadoc"
    from javadoc.destinationDir
}

tasks.withType(JavaCompile).configureEach {
    options.release = 21
}

configurations {
    desktopCompile
    androidCompile
    testCompile

    compileOnly.extendsFrom desktopCompile
    testOnly.extendsFrom desktopCompile

    desktop {
        extendsFrom desktopCompile
//        extendsFrom runtime
    }
    android {
        extendsFrom androidCompile
//        extendsFrom runtime
    }
    test {
        extendsFrom testCompile

    }
}


def code=1000000

sourceCompatibility = 21
targetCompatibility = 21

tasks.withType(JavaCompile).configureEach {
    options.release = 21
}

configurations {
    desktopCompile
    androidCompile
    testCompile

    compileOnly.extendsFrom desktopCompile
    testOnly.extendsFrom desktopCompile

    desktop {
        extendsFrom desktopCompile
//        extendsFrom runtime
    }
    android {
        extendsFrom androidCompile
//        extendsFrom runtime
    }
    test {
        extendsFrom testCompile

    }
}

sourceSets {
    main {
        java {
            srcDirs 'src/main/java'
        }
        resources {
            srcDirs "src/main/resources", "src/main/configs", "src/main/java"
        }
    }
    test {
        java {
            srcDirs 'src/test/java'
        }
        resources {
            srcDirs "src/test/resources", "src/test/configs", "src/test/java"
        }
    }
}


repositories {
    google()
    mavenCentral()
    maven {
        url = uri("https://repo.maven.apache.org/maven2/")
    }
    maven {
        url = uri("https://s01.oss.sonatype.org/content/repositories/snapshots/")
    }
    maven {
        url = uri("https://repository.sonatype.org/content/groups/public/")
    }
    maven {
        url = uri("https://mvnrepository.com/")
    }
    maven {
        url = uri("https://maven.scijava.org/content/repositories/public/")
    }
    maven {
        url = uri("https://plugins.gradle.org/m2/")
    }
    maven {
        url "https://maven.jzy3d.org/releases/"
    }
    maven {
        url "https://www.jetbrains.com/intellij-repository/releases"
    }
    flatDir dirs: "${rootDir}/lib"
}

Properties load = properties


//tasks.register('copyDeps', Copy) {
//    from(configurations.compile + configurations.testCompile) {
//        include "**/*.jar"
//        include "**/*.xml"
//        include "**/*.properties"
//        include "**/*.dll"
//        include "**/*.so"
//    }
//    duplicatesStrategy(DuplicatesStrategy.EXCLUDE)
//}

signing {
    def signingKey = load.get("signing.keyId")
    def signingPassword = load.get("signing.password")

    useGpgCmd()
    //useInMemoryPgpKeys(signingKey, signingPassword)

    sign publishing.publications
    sign configurations.archives
}

group = 'one.empty3.libs'
version = '0.0.5'



sourceCompatibility = 21
targetCompatibility = 21

tasks.withType(JavaCompile).configureEach {
    options.release = 21
}

configurations {
    desktopCompile
    androidCompile

    compileOnly.extendsFrom desktopCompile
    testCompile.extendsFrom desktopCompile // Assuming tests run on the desktop

    desktop {
        extendsFrom desktopCompile
        //extendsFrom runtime
    }
    android {
        extendsFrom androidCompile
        //extendsFrom runtime
    }
}


java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(21)
    }
}



java {
    withJavadocJar()
    withSourcesJar()
}

/*
tasks.register('javadocJar', Jar) {
    dependsOn javadoc
    archiveClassifier = "javadoc"
    from javadoc.destinationDir
}
*/

dependencies {
    api "androidx.tracing:tracing:1.2.0@aar"
    api "androidx.test:core:1.6.1@aar"
    api "androidx.test:monitor:1.7.2@aar"
    api 'androidx.core:core-ktx:1.15.0@aar'
    api 'androidx.appcompat:appcompat:1.7.0@aar'
    api 'com.google.android.material:material:1.12.0@aar'
    api 'androidx.appcompat:appcompat:1.7.0@aar'
    api 'androidx.lifecycle:lifecycle-runtime-ktx:2.8.7@aar'
    api 'androidx.recyclerview:recyclerview:1.3.2@aar'
    api 'androidx.work:work-runtime-ktx:2.10.0@aar'
    api 'androidx.preference:preference-ktx:1.2.1@aar'
    api "androidx.annotation:annotation:1.9.1@aar"
    //api "androidx.annotation:annotation-jvm:1.9.1@aar"
    api "android.arch.core:common:1.1.1@aar"
    // To use the Java-compatible @androidx.annotation.OptIn API annotation
    api "androidx.annotation:annotation-experimental:1.4.1@aar"
    api 'junit:junit:4.13.2'
    api group: 'one.empty3.libs', name: 'commons-mp', version: '0.0.4'

}

signing {
    def signingKey = load.get("signing.keyId")
    def signingPassword = load.get("signing.password")

    useGpgCmd()


    sign publishing.publications
    sign configurations.archives
}


publishing {
    publications {
        maven(MavenPublication) {
            groupId = 'one.empty3.libs'
            artifactId = 'partial-android'
            version = '0.0.5'
            project.tasks.withType(Sign) {
                signatures.all {

                }
            }

            // The pom can be enriched as usual
            pom {
                name = 'partial-android'
                description = 'Adaptative class for Java Desktop/Android app . Android version'
                packaging 'jar'
                url = "https://github.com/manuelddahmen/partial-android"
                version '0.0.5'
                inceptionYear = '2024'
                licenses {
                    license {
                        name = "Apache version 2"
                        url = "https://www.apache.org/licenses/LICENSE-2.0"
                        distribution = "repo"
                    }
                }

                scm {

                    url = "https://github.com/manuelddahmen/partial-android"
                    connection = "scm:git:https://github.com/manuelddahmen/partial-desktop.git"
                    developerConnection = "scm:git:https://github.com/manuelddahmen/partial-desktop.git"

                }
                developers {
                    developer {
                        email = "manuel.dahmen@gmx.com"
                        name = "Manuel Daniel Dahmen"

                        url = "https://empty3.one"
                        id = "manuelddahmen"
                    }
                }

            }
        }
    }

    repositories {
        maven {
            url = layout.buildDirectory.dir('staging-deploy')
        }

    }
}



publishing {
    publications {
        release(MavenPublication) {
            groupId = 'one.empty3.libs'
            artifactId = 'partial-android'
            version = '0.0.2'
            from components.java
            project.tasks.withType(Sign) {
                signatures.all {

                }
            }

            // The pom can be enriched as usual
            pom {
                name = 'partial-android'
                description = 'Adaptative class for Java Desktop/Android app . Android version'
                packaging 'jar'
                url = "https://github.com/manuelddahmen/partial-android"
                version '2024.9.2'
                inceptionYear = '2024'
                licenses {
                    license {
                        name = "Apache version 2"
                        url = "https://www.apache.org/licenses/LICENSE-2.0"
                        distribution = "repo"
                    }
                }

                scm {

                    url = "https://github.com/manuelddahmen/partial-android"
                    connection = "scm:git:https://github.com/manuelddahmen/partial-android.git"
                    developerConnection = "scm:git:https://github.com/manuelddahmen/partial-android.git"

                }
                developers {
                    developer {
                        email = "manuel.dahmen@gmx.com"
                        name = "Manuel Daniel Dahmen"

                        url = "https://empty3.one"
                        id = "manuelddahmen"
                    }
                }

            }

        }
    }


    repositories {
        maven {
            url = layout.buildDirectory.dir('staging-deploy')
        }

    }
}

jreleaser {
    signing {

        active = 'ALWAYS'
        armored = true
        mode = 'FILE'
        publicKey = load.get('signing.publicKeyPath')
        passphrase = load.get('signing.passphrase')
        secretKey = load.get('signing.secretKey')
        release.github.token = load.get('release.github.token')

    }
    project {
        name = 'partial-android'
        java.artifactId = 'partial-android'
        java.groupId = 'one.empty3.libs'
        java.version = '0.0.2'
        version = '0.0.2'
        license = 'Apache-2.0'
        authors = ['Manuel D DAHMEN']
        description = 'Adaptive class for Java Desktop/Android app . Android version'
        icon {
            // Publicly available URL. PNG format is preferred.
            //
            url = 'https://empty3.one/favicon.ico'
            // Marks this icon as the primary one.
            // Only a single icon may be set as primary.
            //
            primary = true
            // Image width in pixels.
            //
            width = 47
            // Image height in pixels.
            //
            height = 47
        }
    }

    deploy {
        maven {
            // Enable or disable all configured deployers.
            // Supported values are [`NEVER`, `ALWAYS`, `RELEASE`, `SNAPSHOT`].
            // Defaults to `ALWAYS`.
            //
            active = 'ALWAYS'
            pomchecker {
                // Defines the tool version to use.
                //
                version = '1.11.0'

                // Fail the release if pomchecker outputs a warning.
                // Defaults to `true`.
                //
                failOnWarning = false

                // Fail the release if pomchecker outputs an error.
                // Defaults to `true`.
                //
                failOnError = false
            }
            mavenCentral {
                app {
                    active = 'ALWAYS'
                    url = 'https://central.sonatype.com/api/v1/publisher'
                    gitRootSearch = false
                    stagingRepository('build/staging-deploy')
                    username = propertiesReleaseConfig.get('JRELEASER_MAVENCENTRAL_USERNAME')
                    authorization = 'BASIC'
                    // Password for login into the MAVENCENTRAL service.
                    //
                    password = propertiesReleaseConfig.get('JRELEASER_MAVENCENTRAL_PASSWORD')
                    // List of directories where staged artifacts can be found.
                    stagingRepository('target/staging-deploy')

                    // Defines the connection timeout in seconds.
                    // Defaults to `20`.
                    //
                    connectTimeout = 20

                    // Defines the read timeout in seconds.
                    // Defaults to `60`.
                    //
                    readTimeout = 60

                    // Additional properties used when evaluating templates.
                    // Key will be capitalized and prefixed with `mavenCentral`, i.e, `mavenCentralFoo`.
                    //
                    extraProperties.put('foo', 'bar')

                    // Registered publication namespace.
                    // Defaults to `${project.java.groupId}`.
                    //
                    namespace = 'one.empty3.libs'

                    // Deployment identifier used for publication.
                    //
                    deploymentId = '242a09a3-285e-426f-a487-3c2287b079ad'

                    // Time to wait between state transition checks, in seconds.
                    // Defaults to `10`.
                    //
                    retryDelay = 10

                    // Maximum number of attempts to verify state transition.
                    // Defaults to `60`.
                    //
                    maxRetries = 60
                }
            }
        }
    }
    upload {
        // Enable or disable all configured uploaders.
        // Supported values are [`NEVER`, `ALWAYS`, `RELEASE`, `SNAPSHOT`].
        // Defaults to `ALWAYS`.
        //
        active = 'ALWAYS'
    }
}